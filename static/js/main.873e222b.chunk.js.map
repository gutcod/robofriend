{"version":3,"sources":["redux/reducers.js","redux/rootReducer.js","redux/actionType.js","redux/store.js","serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","App.js","redux/action.js","index.js"],"names":["INITIAL_STATE_SEARCH","searchField","isPending","robots","INITIAL_STATE_REQUEST","err","combineReducers","search","state","action","type","payload","requestRobotsReducer","middleware","logger","thunk","store","createStore","rootReducer","applyMiddleware","Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","CardList","map","user","i","key","SearchBox","searchfild","searchChange","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","hasError","error","info","this","setState","Component","connect","dispatch","setSearchField","event","target","value","setRobots","fetch","then","response","json","data","catch","useEffect","filterRobots","filter","robot","toLowerCase","includes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.873e222b.chunk.js","sourcesContent":["import {\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  SET_SERCH_FIELD,\n} from \"./actionType\";\n\nconst INITIAL_STATE_SEARCH = {\n  searchField: \"\",\n  isPending: false,\n  robots: [],\n};\n// serhc robots\nexport const searchReducer = (state = INITIAL_STATE_SEARCH, action) => {\n  switch (action.type) {\n    case SET_SERCH_FIELD:\n      return {\n        ...state,\n        searchField: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n// request robots\nconst INITIAL_STATE_REQUEST = {\n  isPending: false,\n  robots: [],\n  err: \"\",\n};\nexport const requestRobotsReducer = (state = INITIAL_STATE_REQUEST, action) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return {\n        ...state,\n        isPending: true,\n      };\n    case REQUEST_ROBOTS_SUCCESS:\n      return {\n        ...state,\n        robots: action.payload,\n        isPending: false,\n      };\n    case REQUEST_ROBOTS_FAILED:\n      return {\n        ...state,\n        err: action.payload,\n        isPending: false,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { requestRobotsReducer, searchReducer } from \"./reducers\";\n\nexport default combineReducers({\n  search: searchReducer,\n  requestRobotsReducer: requestRobotsReducer,\n});\n","// search robots\nexport const SET_SERCH_FIELD = \"SET_SERCH_FIELD\";\n\n//fetch robots\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","import { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"./rootReducer\";\nimport logger from \"redux-logger\";\nimport thunk from \"redux-thunk\";\n\nconst middleware = [logger, thunk];\n\nconst store = createStore(rootReducer, applyMiddleware(...middleware));\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nconst Card = ({name,email,id}) =>{\n    return(\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img alt=\"roboimg\" src={`https://robohash.org/${id}?100x100`} />\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList= ({robots}) =>{\n    \n    return(\n        <div>\n           {robots.map((user,i)=>{\n                return (\n                    <Card \n                        key={i} \n                        id={robots[i].id} \n                        name={robots[i].name} \n                        email={robots[i].email} \n                    />\n                    );\n                })\n            }\n       </div>\n    )\n}\nexport default CardList;","import React from \"react\";\n\nconst SearchBox = ({searchfild, searchChange}) => {\n    return(\n        <div className=\"pa2\">\n            <input \n            className=\"pa3 ba br4 b--green bg-wached-green\"\n            type=\"search\" \n            placeholder=\"Search robots\" \n            onChange={searchChange}\n            />\n        </div>\n        \n    )\n}\n export default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>{\n    return (\n        <div style={{overflowY:'scroll' ,border:'1px solid black', height:'600px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { useEffect } from \"react\";\nimport CardList from \"./components/CardList\";\nimport SearchBox from \"./components/SearchBox\";\nimport Scroll from \"./components/Scroll\";\nimport { connect } from \"react-redux\";\nimport { setSearchField, requestRobots } from \"./redux/action\";\nimport \"./App.css\";\nimport ErrorBoundary from \"./components/ErrorBoundary\";\n\nfunction App({ searchField, setSearchField, robots, isPending, setRobots }) {\n  useEffect(() => {\n    setRobots();\n  }, []);\n\n  const filterRobots = robots.filter(robot => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n  if (isPending) {\n    return <h1>Loading</h1>;\n  } else {\n    return (\n      <div className='tc'>\n        <h1 className='f1'>Robofriends</h1>\n        <SearchBox searchChange={setSearchField} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filterRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\n// parameter state comes from index.js provider store state(rootReducers)\nconst mapStateToProps = state => {\n  return {\n    searchField: state.search.searchField,\n    robots: state.requestRobotsReducer.robots,\n    isPending: state.requestRobotsReducer.isPending,\n  };\n};\n\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\nconst mapDispatchToProps = dispatch => {\n  return {\n    setSearchField: event => dispatch(setSearchField(event.target.value)),\n    setRobots: () => dispatch(requestRobots()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  SET_SERCH_FIELD,\n} from \"./actionType\";\n\n// returneaza un obj\nexport const setSearchField = text => ({\n  type: SET_SERCH_FIELD,\n  payload: text,\n});\n// thunk returneaza o functie\n// this is Hight order func => funct that return func\nexport const requestRobots = () => dispatch => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }));\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./App\";\nimport \"tachyons\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}